// Local headers
#include "program.hpp"
#include "gloom/gloom.hpp"
#include "gloom/shader.hpp"
#include <glm/mat4x4.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/transform.hpp>
#include <glm/vec3.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include "sceneGraph.hpp" //Added

//-----------------------------------------------------------------------------------------------------------------
//Global Variables:
//-----------------------------------------------------------------------------------------------------------------
	//Perspective matrix
		float FOVRadiansY = 1.5;
		float AspectRatio = 1.0;
		float NearPlane = 0.1;
		float FarPlane = 100.0;
		glm::mat4 ProjectionMatrix;
	//Matrices
		glm::mat4 VP;
		glm::mat4 ViewMatrix;
	//World coordinate axis
		const glm::vec3 XAxis(1, 0, 0);
		const glm::vec3 YAxis(0, 1, 0);
		const glm::vec3 ZAxis(0, 0, 1);
	//Observer data saved as its Z- and Y-axis and position in WCS
		glm::vec4 ObserverZAxis(0, 0, -1, 0);
		glm::vec4 ObserverPosition(0, 0, 1, 1);
		glm::vec4 ObserverYAxis(0, 1, 0, 0);
	//Functions
		SceneNode* CreateScene();
		SceneNode* UpdateSceneNodes(SceneNode* Scene, double DeltaT);
		SceneNode* UpdateSceneNode(SceneNode* Node, double DeltaT, float ParentX, float ParentY, float ParentZ, float RotationX, float RotationY, float RotationZ);
		void RenderScene(SceneNode* Scene);
		void UpdateVP();
//-----------------------------------------------------------------------------------------------------------------

unsigned int SetUpVAO(float* Coordinates, int nCoordinates, int* Indices, int nIndices, float* Colour, unsigned int ColourLength) {
	//VAO
	unsigned int Array = 0;
	glGenVertexArrays(1, &Array);
	glBindVertexArray(Array);
	//VBO
	unsigned int Buffer = 0;
	glGenBuffers(1, &Buffer);
	glBindBuffer(GL_ARRAY_BUFFER, Buffer);
	glBufferData(GL_ARRAY_BUFFER, (nCoordinates * sizeof(float)), Coordinates, GL_STATIC_DRAW);
	//Vertex Attribute Pointer for coordinates
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	//Enabling the vertex attributes
	glEnableVertexAttribArray(0);
	//Index buffer
	unsigned int IndexBuffer = 0;
	glGenBuffers(1, &IndexBuffer);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBuffer);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, (nIndices * sizeof(int)), Indices, GL_STATIC_DRAW);
	//Colour
	unsigned int ColourID;
	glGenBuffers(1, &ColourID);
	glBindBuffer(GL_ARRAY_BUFFER, ColourID);
	glBufferData(GL_ARRAY_BUFFER, ColourLength, Colour, GL_STATIC_DRAW);
	//Vertex Attribute Pointer for colours
	glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);
	//Return value
	return Array;
}

void runProgram(GLFWwindow* window)
{
	// Enable depth (Z) buffer (accept "closest" fragment)
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LESS);

	// Configure miscellaneous OpenGL settings
	glEnable(GL_CULL_FACE);

	// Set default colour after clearing the colour buffer
	glClearColor(0.3f, 0.5f, 0.8f, 1.0f);

//---------------------------------------------------------------------------------------------------------------------------------------------
//Set up your scene here (create Vertex Array Objects, etc.)
//---------------------------------------------------------------------------------------------------------------------------------------------
	//Enable transparency
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	//Create Scenenode
		SceneNode* Scene = CreateScene();
//---------------------------------------------------------------------------------------------------------------------------------------------
//Load shaders
//---------------------------------------------------------------------------------------------------------------------------------------------
	Gloom::Shader Shader;
	Shader.makeBasicShader("C:/Users/stianbm/gloom/gloom/shaders/simple.vert", "C:/Users/stianbm/gloom/gloom/shaders/simple.frag");
//Activate shader
	Shader.activate();
//---------------------------------------------------------------------------------------------------------------------------------------------
	// Rendering Loop
	while (!glfwWindowShouldClose(window))
	{
		// Clear colour and depth buffers
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

//---------------------------------------------------------------------------------------------------------------------------------------------
// Draw your scene here
//---------------------------------------------------------------------------------------------------------------------------------------------
		double TimePassed = getTimeDeltaSeconds();
		Scene = UpdateSceneNodes(Scene, TimePassed);
		UpdateVP();
	//Render Torso and its children
		RenderScene(Scene->children[0]);
	//Render Chess
		RenderScene(Scene->children[1]);
//---------------------------------------------------------------------------------------------------------------------------------------------
		// Handle other events
		glfwPollEvents();
		handleKeyboardInput(window);

		// Flip buffers
		glfwSwapBuffers(window);
	}
	//Deactivate shader
	Shader.deactivate();
}

void handleKeyboardInput(GLFWwindow* window)
{
	//Find the relative x-axis as the crossproduct of the Z- and Y-axis
	glm::vec3 RelativeRightVector = glm::cross(glm::vec3(ObserverZAxis), glm::vec3(ObserverYAxis));
	// Use escape key for terminating the GLFW window
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
	{
		glfwSetWindowShouldClose(window, GL_TRUE);
	}
	//Forward
	else if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
	{
		ObserverPosition = ObserverPosition + 0.1f*ObserverZAxis;
	}
	//Backward
	else if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
	{
		ObserverPosition = ObserverPosition - 0.1f*ObserverZAxis;
	}
	//Up
	else if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
	{
		ObserverPosition = glm::translate(0.1f*glm::vec3(ObserverYAxis))*ObserverPosition;
	}
	//Down
	else if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
	{
		ObserverPosition = glm::translate(-0.1f*glm::vec3(ObserverYAxis))*ObserverPosition;
	}
	//RightStrafe
	else if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
	{
		ObserverPosition = glm::translate(0.1f*RelativeRightVector)*ObserverPosition;
	}
	//LeftStrafe
	else if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
	{
		ObserverPosition = glm::translate(-0.1f*RelativeRightVector)*ObserverPosition;
	}
	//Pitch down
	else if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
	{
		glm::mat4x4 rotation = glm::rotate(-0.1f, RelativeRightVector);
		ObserverZAxis = rotation*ObserverZAxis;
		ObserverYAxis = rotation*ObserverYAxis;
	}
	//Pitch up
	else if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
	{
		glm::mat4x4 rotation = glm::rotate(0.1f, RelativeRightVector);
		ObserverZAxis = rotation*ObserverZAxis;
		ObserverYAxis = rotation*ObserverYAxis;
	}
	//Yaw Right
	else if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)
	{
		glm::mat4x4 rotation = glm::rotate(0.1f, glm::vec3(ObserverZAxis));
		ObserverZAxis = rotation*ObserverZAxis;
		ObserverYAxis = rotation*ObserverYAxis;
	}
	//Yaw Left
	else if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)
	{
		glm::mat4x4 rotation = glm::rotate(-0.1f, glm::vec3(ObserverZAxis));
		ObserverZAxis = rotation*ObserverZAxis;
		ObserverYAxis = rotation*ObserverYAxis;
	}
	//Turn right
	else if (glfwGetKey(window, GLFW_KEY_L) == GLFW_PRESS)
	{
		glm::mat4x4 rotation = glm::rotate(-0.1f, glm::vec3(ObserverYAxis));
		ObserverZAxis = rotation*ObserverZAxis;
		ObserverYAxis = rotation*ObserverYAxis;
	}
	//Turn left
	else if (glfwGetKey(window, GLFW_KEY_K) == GLFW_PRESS)
	{
		glm::mat4x4 rotation = glm::rotate(0.1f, glm::vec3(ObserverYAxis));
		ObserverZAxis = rotation*ObserverZAxis;
		ObserverYAxis = rotation*ObserverYAxis;
	};
}

SceneNode* CreateScene() {
//-----------------------------------------------------------------------------------------------------------------
//Torso
//-----------------------------------------------------------------------------------------------------------------
	//Colour
	unsigned int BoxColourLength = 36 * 4 * sizeof(unsigned int);
	float RedBox[] = {
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0.2, 0, 1.0,
		1, 0.2, 0, 1.0,
		1, 0.2, 0, 1.0,
		1, 0.2, 0, 1.0,
		1, 0.2, 0, 1.0,
		1, 0.2, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
		1, 0, 0, 1.0,
	};
	//Vertices
	//Create torso use GL_Triangles to create a box of 6 squares, each square of 2 triangles
	float startLength = -0.2;
	float length =  startLength + 0.4;
	float startHeight = -0.3;
	float height = startHeight + 0.6;
	float startDepth = -0.1;
	float depth = startDepth + 0.2;
	float TorsoVertices[] = {
		//Front
		startLength, startHeight, depth,
		length, startHeight, depth,
		startLength, height, depth,

		length, startHeight, depth,
		length, height, depth,
		startLength, height, depth,

		//Back
		startLength, startHeight, startDepth,
		startLength, height, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		startLength, height, startDepth,
		length, height, startDepth,

		//Right
		length, startHeight, depth,
		length, startHeight, startDepth,
		length, height, startDepth,

		length, startHeight, depth,
		length, height, startDepth,
		length, height, depth,

		//Left
		startLength, startHeight, depth,
		startLength, height, depth,
		startLength, startHeight, startDepth,

		startLength, height, depth,
		startLength, height, startDepth,
		startLength, startHeight, startDepth,

		//Top
		startLength, height, depth,
		length, height, depth,
		length, height, startDepth,

		length, height, startDepth,
		startLength, height, startDepth,
		startLength, height, depth,

		//Bottom
		startLength, startHeight, depth,
		startLength,startHeight, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		length, startHeight, depth,
		startLength, startHeight, depth,
	};
	//float* Plane = CreatePlane(0.5, 0.5);
	unsigned int BoxLength = 6 * 2 * 3 * 3;
	int BoxIndices[] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35 };
	unsigned int BoxnIndices = 36;
	int TorsoArray = SetUpVAO(TorsoVertices, BoxLength, BoxIndices, BoxnIndices, RedBox, BoxColourLength);
//---------------------------------------------------------------------------------------------------------------------------------------------
//LeftArm
//---------------------------------------------------------------------------------------------------------------------------------------------
	//Colour
	float BlueBox[] = {
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.4,0.0,1.0,1.0,
		0.4,0.0,1.0,1.0,
		0.4,0.0,1.0,1.0,
		0.4,0.0,1.0,1.0,
		0.4,0.0,1.0,1.0,
		0.4,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
		0.0,0.0,1.0,1.0,
	};
	//Vertices
	startLength = -0.1;
	startHeight = -0.3;
	startDepth = -0.1;
	length = startLength + 0.2;
	height = startHeight + 0.6;
	depth = startDepth + 0.2;
	float Arm1[] = {
		//Front
		startLength, startHeight, depth,
		length, startHeight, depth,
		startLength, height, depth,

		length, startHeight, depth,
		length, height, depth,
		startLength, height, depth,

		//Back
		startLength, startHeight, startDepth,
		startLength, height, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		startLength, height, startDepth,
		length, height, startDepth,

		//Right
		length, startHeight, depth,
		length, startHeight, startDepth,
		length, height, startDepth,

		length, startHeight, depth,
		length, height, startDepth,
		length, height, depth,

		//Left
		startLength, startHeight, depth,
		startLength, height, depth,
		startLength, startHeight, startDepth,

		startLength, height, depth,
		startLength, height, startDepth,
		startLength, startHeight, startDepth,

		//Top
		startLength, height, depth,
		length, height, depth,
		length, height, startDepth,

		length, height, startDepth,
		startLength, height, startDepth,
		startLength, height, depth,

		//Bottom
		startLength, startHeight, depth,
		startLength,startHeight, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		length, startHeight, depth,
		startLength, startHeight, depth,
	};
	unsigned int Arm1Array = SetUpVAO(Arm1, BoxLength, BoxIndices, BoxnIndices, BlueBox, BoxColourLength);
//---------------------------------------------------------------------------------------------------------------------------------------------
//RightArm
//---------------------------------------------------------------------------------------------------------------------------------------------
	//Vertices
	startLength = -0.2;
	length = startLength + 0.2;
	float Arm2[] = {
		//Front
		startLength, startHeight, depth,
		length, startHeight, depth,
		startLength, height, depth,

		length, startHeight, depth,
		length, height, depth,
		startLength, height, depth,

		//Back
		startLength, startHeight, startDepth,
		startLength, height, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		startLength, height, startDepth,
		length, height, startDepth,

		//Right
		length, startHeight, depth,
		length, startHeight, startDepth,
		length, height, startDepth,

		length, startHeight, depth,
		length, height, startDepth,
		length, height, depth,

		//Left
		startLength, startHeight, depth,
		startLength, height, depth,
		startLength, startHeight, startDepth,

		startLength, height, depth,
		startLength, height, startDepth,
		startLength, startHeight, startDepth,

		//Top
		startLength, height, depth,
		length, height, depth,
		length, height, startDepth,

		length, height, startDepth,
		startLength, height, startDepth,
		startLength, height, depth,

		//Bottom
		startLength, startHeight, depth,
		startLength,startHeight, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		length, startHeight, depth,
		startLength, startHeight, depth,
	};
	unsigned int Arm2Array = SetUpVAO(Arm2, BoxLength, BoxIndices, BoxnIndices, BlueBox, BoxColourLength);
//---------------------------------------------------------------------------------------------------------------------------------------------
//LeftLeg
//---------------------------------------------------------------------------------------------------------------------------------------------
	//Colour
	float GreenBox[] = {
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.4,1.0,0.0,1.0,
		0.4,1.0,0.0,1.0,
		0.4,1.0,0.0,1.0,
		0.4,1.0,0.0,1.0,
		0.4,1.0,0.0,1.0,
		0.4,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
		0.0,1.0,0.0,1.0,
	};
	//Vertices
	startLength = 0.2;
	length = startLength + 0.2;
	startHeight = -0.6;
	height = startHeight + 0.6;
	float Leg1[] = {
		//Front
		startLength, startHeight, depth,
		length, startHeight, depth,
		startLength, height, depth,

		length, startHeight, depth,
		length, height, depth,
		startLength, height, depth,

		//Back
		startLength, startHeight, startDepth,
		startLength, height, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		startLength, height, startDepth,
		length, height, startDepth,

		//Right
		length, startHeight, depth,
		length, startHeight, startDepth,
		length, height, startDepth,

		length, startHeight, depth,
		length, height, startDepth,
		length, height, depth,

		//Left
		startLength, startHeight, depth,
		startLength, height, depth,
		startLength, startHeight, startDepth,

		startLength, height, depth,
		startLength, height, startDepth,
		startLength, startHeight, startDepth,

		//Top
		startLength, height, depth,
		length, height, depth,
		length, height, startDepth,

		length, height, startDepth,
		startLength, height, startDepth,
		startLength, height, depth,

		//Bottom
		startLength, startHeight, depth,
		startLength,startHeight, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		length, startHeight, depth,
		startLength, startHeight, depth,
	};
	unsigned int Leg1Array = SetUpVAO(Leg1, BoxLength, BoxIndices, BoxnIndices, GreenBox, BoxColourLength);
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//RightLeg
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//Vertices
	startLength = 0.0;
	length = startLength + 0.2;
	float Leg2[] = {
		//Front
		startLength, startHeight, depth,
		length, startHeight, depth,
		startLength, height, depth,

		length, startHeight, depth,
		length, height, depth,
		startLength, height, depth,

		//Back
		startLength, startHeight, startDepth,
		startLength, height, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		startLength, height, startDepth,
		length, height, startDepth,

		//Right
		length, startHeight, depth,
		length, startHeight, startDepth,
		length, height, startDepth,

		length, startHeight, depth,
		length, height, startDepth,
		length, height, depth,

		//Left
		startLength, startHeight, depth,
		startLength, height, depth,
		startLength, startHeight, startDepth,

		startLength, height, depth,
		startLength, height, startDepth,
		startLength, startHeight, startDepth,

		//Top
		startLength, height, depth,
		length, height, depth,
		length, height, startDepth,

		length, height, startDepth,
		startLength, height, startDepth,
		startLength, height, depth,

		//Bottom
		startLength, startHeight, depth,
		startLength,startHeight, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		length, startHeight, depth,
		startLength, startHeight, depth,
	};
	unsigned int Leg2Array = SetUpVAO(Leg2, BoxLength, BoxIndices, BoxnIndices, GreenBox, BoxColourLength);
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//Head
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//Colour
	float PurpleBox[] = {
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.3,0.5,1.0,
		0.5,0.3,0.5,1.0,
		0.5,0.3,0.5,1.0,
		0.5,0.3,0.5,1.0,
		0.5,0.3,0.5,1.0,
		0.5,0.3,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
	};
	//Vertices
	length = startLength + 0.4;
	startHeight = 0.6;
	height = startHeight + 0.4;
	startDepth = -0.1;
	depth = startDepth + 0.4;
	float HeadVertices[] = {
		//Front
		startLength, startHeight, depth,
		length, startHeight, depth,
		startLength, height, depth,

		length, startHeight, depth,
		length, height, depth,
		startLength, height, depth,

		//Back
		startLength, startHeight, startDepth,
		startLength, height, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		startLength, height, startDepth,
		length, height, startDepth,

		//Right
		length, startHeight, depth,
		length, startHeight, startDepth,
		length, height, startDepth,

		length, startHeight, depth,
		length, height, startDepth,
		length, height, depth,

		//Left
		startLength, startHeight, depth,
		startLength, height, depth,
		startLength, startHeight, startDepth,

		startLength, height, depth,
		startLength, height, startDepth,
		startLength, startHeight, startDepth,

		//Top
		startLength, height, depth,
		length, height, depth,
		length, height, startDepth,

		length, height, startDepth,
		startLength, height, startDepth,
		startLength, height, depth,

		//Bottom
		startLength, startHeight, depth,
		startLength,startHeight, startDepth,
		length, startHeight, startDepth,

		length, startHeight, startDepth,
		length, startHeight, depth,
		startLength, startHeight, depth,
	};
	unsigned int HeadArray = SetUpVAO(HeadVertices, BoxLength, BoxIndices, BoxnIndices, PurpleBox, BoxColourLength);
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//ChessBoard
	//---------------------------------------------------------------------------------------------------------------------------------------------
	//SquareColours
	unsigned int SquareColourLength = 4 * 6 * sizeof(float);
	float GreenSquare[] = {
		0.0,0.8,0.2,1.0,
		0.0,0.8,0.2,1.0,
		0.0,0.8,0.2,1.0,
		0.0,0.8,0.2,1.0,
		0.0,0.8,0.2,1.0,
		0.0,0.8,0.2,1.0,
	};
	float PurpleSquare[] = {
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
		0.5,0.0,0.5,1.0,
	};
	//Squares
	unsigned int SquareLength = 18;
	int SquareIndices[] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 };
	int SquarenIndices = 18;
	height = -0.6;
	startLength = 0.0;
	length = startLength + 1.0;
	startDepth = 0.0;
	depth = startDepth + 1.0;
	float Square1[] = {
		startLength, height, startDepth,
		startLength, height, depth,
		length, height, startDepth,

		length, height, startDepth,
		startLength, height, depth,
		length, height, depth,
	};
	unsigned int SquareArray = SetUpVAO(Square1, SquareLength, SquareIndices, SquarenIndices, GreenSquare, SquareColourLength);
//---------------------------------------------------------------------------------------------------------------------------------------------
//Nodes
//---------------------------------------------------------------------------------------------------------------------------------------------
	SceneNode* Scene = createSceneNode();
//Torso
	SceneNode* Torso = createSceneNode();
	Torso->vertexArrayObjectID = TorsoArray;
//LeftArm
	SceneNode* LeftArm = createSceneNode();
	LeftArm->vertexArrayObjectID = Arm1Array;
	LeftArm->referencePoint = {0.3,0.0,0.0};
//RightArm
	SceneNode* RightArm = createSceneNode();
	RightArm->vertexArrayObjectID = Arm2Array;
	RightArm->referencePoint = {-0.2,0.0,0.0};
//LeftLeg
	SceneNode* LeftLeg = createSceneNode();
	LeftLeg->vertexArrayObjectID = Leg1Array;
	LeftLeg->referencePoint = {-0.2,-0.3,0.0};
//RightLeg
	SceneNode* RightLeg = createSceneNode();
	RightLeg->vertexArrayObjectID = Leg2Array;
	RightLeg->referencePoint = { -0.2,-0.3,0.0 };
//Head
	SceneNode* Head = createSceneNode();
	Head->vertexArrayObjectID = HeadArray;
	Head->referencePoint = {-0.2,-0.3,-0.1};
//Chess
	SceneNode* Chess = createSceneNode();
	Chess->vertexArrayObjectID = SquareArray;
	Chess->referencePoint = {0.0,-0.3,0.0};
//Graph
	addChild(Scene, Torso);
	addChild(Torso, LeftArm);
	addChild(Torso, RightArm);
	addChild(Torso, LeftLeg);
	addChild(Torso, RightLeg);
	addChild(Torso, Head);
	addChild(Scene, Chess);
	return Scene;
};

//Steer your figure from here
SceneNode* UpdateSceneNodes(SceneNode* Scene, double DeltaT) {
	Scene->children[0]->rotationY += DeltaT;
	Scene->children[0]->z += DeltaT*0.5;
	Scene->children[0] = UpdateSceneNode(Scene->children[0], DeltaT, Scene->children[0]->x, Scene->children[0]->y, Scene->children[0]->z, Scene->children[0]->rotationX, Scene->children[0]->rotationY, Scene->children[0]->rotationZ);
	Scene->children[1] = UpdateSceneNode(Scene->children[1], DeltaT, 0, 0, 0, 0, 0, 0);
	return Scene;
};

SceneNode* UpdateSceneNode(SceneNode* Node,double DeltaT, float ParentX, float ParentY, float ParentZ, float RotationX, float RotationY, float RotationZ) {
	Node->x = ParentX;
	Node->y = ParentY;
	Node->z = ParentZ;
	Node->rotationX = RotationX;
	Node->rotationY = RotationY;
	Node->rotationZ = RotationZ;
	glm::vec4 Position = { Node->x, Node->y, Node->z, 1 };
	//Position = Position*glm::rotate(DeltaT*0.01, -Node->rotationDirection);
	glm::vec3 YAxis = { 0,1,0 };
	glm::mat4 NodeRotationY = glm::rotate(Node->rotationY, YAxis);
	glm::mat4 FigurTranslate = glm::translate(Node->referencePoint);
	glm::mat4 NodePosition = glm::translate(glm::vec3(-Position));
	Node->currentTransformationMatrix = NodePosition * NodeRotationY * FigurTranslate;
	for (unsigned int i = 0; i < Node->children.size(); i++) {
		Node->children[i] = UpdateSceneNode(Node->children[i], DeltaT, Node->x, Node->y, Node->z, Node->rotationX, Node->rotationY, Node->rotationZ);
	}
	return Node;
}

void RenderScene(SceneNode* Node) {
	unsigned int BoxnIndices = 36;
//Main (Torso)
	glm::mat4 ModelMatrix = Node->currentTransformationMatrix;
	glBindVertexArray(Node->vertexArrayObjectID);
	glm::mat4 MVP = VP * ModelMatrix;
	glUniformMatrix4fv(3, 1, GL_FALSE, glm::value_ptr(MVP));
	glDrawElements(GL_TRIANGLES, BoxnIndices, GL_UNSIGNED_INT, 0);
//Rest
	for (unsigned int i = 0; i < Node->children.size(); i++) {
		RenderScene(Node->children[i]);
	}
};

void UpdateVP() {
	//Create MVP
	//Rotation
	//View
	glm::vec4 ObserverDirection(ObserverZAxis);
	//Rotate observer to align relative x-axis with WCS x-axis
	glm::mat4x4 XRotation = glm::rotate(atan2(-ObserverDirection.x, ObserverDirection.z), YAxis);
	ObserverDirection = XRotation * ObserverDirection;

	//Align y-axis
	glm::mat4x4 YRotation = glm::rotate(atan(ObserverDirection.y / ObserverDirection.z), XAxis);
	ObserverDirection = YRotation *ObserverDirection;

	//Make sure observer is oriented down negative z, if not, rotate 180 degrees.
	glm::mat4x4 ZRotation = glm::mat4(1.0);
	if (ObserverDirection.z > 0)
		ZRotation = glm::rotate(3.14f, YAxis);
	ObserverDirection = ZRotation * ObserverDirection;

	//Update the projection matrix
	ProjectionMatrix = glm::perspective(FOVRadiansY, AspectRatio, NearPlane, FarPlane);

	//Get the netto rotationMatrix
	glm::mat4x4 XYZRotation = ZRotation * YRotation * XRotation;

	//Update relative up-vector
	glm::vec4 up = XYZRotation * ObserverYAxis;

	//Find the transformation that finds "up" and rotate up
	glm::mat4x4 RotateUp = glm::rotate(atan2(up.x, up.y), ZAxis);
	XYZRotation = RotateUp * XYZRotation;

	//Transformation for moving observer to origin of WCS
	glm::vec3 ObserverView = -glm::vec3(ObserverPosition);

	//Compute the View Matrix
	glm::mat4x4 viewMatrix = XYZRotation * glm::translate(ObserverView);

	// Compute the MVP
	VP = ProjectionMatrix * viewMatrix;
};


//---------------------------------------------------------------------------------------------------------------------------------------------
//Todo
//---------------------------------------------------------------------------------------------------------------------------------------------
/*
	-Make some kind of grid coordinates
	-Make figur go in straight line to coordinates
	-Make figure face coordinates
	-Make walking animations
*/